"""Update custom str enums

Revision ID: a34615b441e6
Revises: e614e8b219c1
Create Date: 2024-10-30 17:28:01.310451

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a34615b441e6'
down_revision = 'e614e8b219c1'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('access_role_access_scopes', 'access_scope',
               existing_type=postgresql.ENUM('admin:admin', 'appliances:write', 'appliances:read', 'electricity_monitoring:write', 'electricity_monitoring:read', 'hvac:read', 'hvac:write', 'locations:write', 'locations:read', 'location_operating_hours:write', 'location_operating_hours:read', 'mesh_networks:write', 'mesh_networks:read', 'organizations:write', 'organizations:read', 'organization_users:write', 'organization_users:read', 'temperature_monitoring:write', 'temperature_monitoring:read', 'users:write', 'users:read', name='accessscope'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('appliances', 'appliance_super_type',
               existing_type=postgresql.ENUM('fridge', 'freezer', 'other', name='appliancesupertypeenum'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('circuits', 'type',
               existing_type=postgresql.ENUM('main', 'neutral', 'branch', name='circuittypeenum'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('clamps', 'phase',
               existing_type=postgresql.ENUM('A', 'B', 'C', 'N', name='clampphaseenum'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('control_zone_temperature_place_links', 'control_zone_temperature_place_type',
               existing_type=postgresql.ENUM('input_duct', 'output_duct', 'room', name='controlzonetemperatureplacetype'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('electric_panels', 'panel_type',
               existing_type=postgresql.ENUM('mdp', 'sub', name='electricpaneltypeenum'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('hvac_holds', 'mode',
               existing_type=postgresql.ENUM('cooling', 'heating', 'auto', 'off', name='hvacschedulemode'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('hvac_holds', 'fan_mode',
               existing_type=postgresql.ENUM('Auto', 'AlwaysOn', name='hvacfanmode'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('hvac_schedule_events', 'mode',
               existing_type=postgresql.ENUM('cooling', 'heating', 'auto', 'off', name='hvacschedulemode'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('location_operating_hours', 'day_of_week',
               existing_type=postgresql.ENUM('sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', name='dayofweek'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('location_time_of_use_rates', 'days_of_week',
               existing_type=postgresql.ARRAY(postgresql.ENUM('sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', name='dayofweek')),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=False)
    op.alter_column('nodes', 'type',
               existing_type=postgresql.ENUM('standard', 'modbus', name='nodetypeenum'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('organization_feature_toggles', 'organization_feature_toggle',
               existing_type=postgresql.ENUM('alert-center', 'autoconfigure', 'manual-overrides', 'autochangeover', 'zone-temperatures', name='organizationfeaturetoggleenum'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('temperature_ranges', 'warning_level',
               existing_type=postgresql.ENUM('GOOD', 'WARNING', 'DANGER', name='temperaturerangewarninglevelenum'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('temperature_sensor_place_alerts', 'alert_type',
               existing_type=postgresql.ENUM('above_normal_operating_range', 'below_normal_operating_range', name='temperaturesensorplacealerttype'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('temperature_sensor_places', 'temperature_sensor_place_type',
               existing_type=postgresql.ENUM('appliance', 'zone', name='temperaturesensorplacetype'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('temperature_sensors', 'make',
               existing_type=postgresql.ENUM('RUUVI', 'MINEW', name='temperaturesensormakeenum'),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('temperature_sensors', 'model',
               existing_type=postgresql.ENUM('RUUVI_TAG', 'S1', 'MST01_01', 'MST01_04', name='temperaturesensormodelenum'),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('temperature_unit_widgets', 'appliance_type',
               existing_type=postgresql.ENUM('Fridge', 'Freezer', 'Other', name='appliancetype'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('thermostats', 'model',
               existing_type=postgresql.ENUM('BC103S-ACDM-24', name='thermostatmodelenum'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('thermostats', 'keypad_lockout',
               existing_type=postgresql.ENUM('Locked', 'Unlocked', 'NotLocked', name='thermostatlockouttype'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('thermostats', 'fan_mode',
               existing_type=postgresql.ENUM('Auto', 'AlwaysOn', name='thermostathvacfanmode'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('user_access_scopes', 'access_scope',
               existing_type=postgresql.ENUM('admin:admin', 'appliances:write', 'appliances:read', 'electricity_monitoring:write', 'electricity_monitoring:read', 'hvac:read', 'hvac:write', 'locations:write', 'locations:read', 'location_operating_hours:write', 'location_operating_hours:read', 'mesh_networks:write', 'mesh_networks:read', 'organizations:write', 'organizations:read', 'organization_users:write', 'organization_users:read', 'temperature_monitoring:write', 'temperature_monitoring:read', 'users:write', 'users:read', name='accessscope'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('user_location_access_grants', 'location_access_grant',
               existing_type=postgresql.ENUM('ALLOW_READ_LOCATION', 'ALLOW_UPDATE_LOCATION', name='locationaccessgrant'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('user_organization_access_grants', 'organization_access_grant',
               existing_type=postgresql.ENUM('ALLOW_READ_ORGANIZATION', 'ALLOW_UPDATE_ORGANIZATION', 'ALLOW_CREATE_LOCATION', 'ALLOW_READ_LOCATION', 'ALLOW_UPDATE_LOCATION', name='organizationaccessgrant'),
               type_=sa.String(),
               existing_nullable=False)
    sa.Enum('main', 'neutral', 'branch', name='circuittypeenum').drop(op.get_bind())
    sa.Enum('A', 'B', 'C', 'N', name='clampphaseenum').drop(op.get_bind())
    sa.Enum('mdp', 'sub', name='electricpaneltypeenum').drop(op.get_bind())
    sa.Enum('RUUVI', 'MINEW', name='temperaturesensormakeenum').drop(op.get_bind())
    sa.Enum('RUUVI_TAG', 'S1', 'MST01_01', 'MST01_04', name='temperaturesensormodelenum').drop(op.get_bind())
    sa.Enum('GOOD', 'WARNING', 'DANGER', name='temperaturerangewarninglevelenum').drop(op.get_bind())
    sa.Enum('above_normal_operating_range', 'below_normal_operating_range', name='temperaturesensorplacealerttype').drop(op.get_bind())
    sa.Enum('sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', name='dayofweek').drop(op.get_bind())
    sa.Enum('Fridge', 'Freezer', 'Other', name='appliancetype').drop(op.get_bind())
    sa.Enum('cooling', 'heating', 'auto', 'off', name='hvacschedulemode').drop(op.get_bind())
    sa.Enum('Auto', 'AlwaysOn', name='hvacfanmode').drop(op.get_bind())
    sa.Enum('Auto', 'AlwaysOn', name='thermostathvacfanmode').drop(op.get_bind())
    sa.Enum('input_duct', 'output_duct', 'room', name='controlzonetemperatureplacetype').drop(op.get_bind())
    sa.Enum('Locked', 'Unlocked', 'NotLocked', name='thermostatlockouttype').drop(op.get_bind())
    sa.Enum('ALLOW_READ_ORGANIZATION', 'ALLOW_UPDATE_ORGANIZATION', 'ALLOW_CREATE_LOCATION', 'ALLOW_READ_LOCATION', 'ALLOW_UPDATE_LOCATION', name='organizationaccessgrant').drop(op.get_bind())
    sa.Enum('ALLOW_READ_LOCATION', 'ALLOW_UPDATE_LOCATION', name='locationaccessgrant').drop(op.get_bind())
    sa.Enum('appliance', 'zone', name='temperaturesensorplacetype').drop(op.get_bind())
    sa.Enum('fridge', 'freezer', 'other', name='appliancesupertypeenum').drop(op.get_bind())
    sa.Enum('alert-center', 'autoconfigure', 'manual-overrides', 'autochangeover', 'zone-temperatures', name='organizationfeaturetoggleenum').drop(op.get_bind())
    sa.Enum('standard', 'modbus', name='nodetypeenum').drop(op.get_bind())
    sa.Enum('BC103S-ACDM-24', name='thermostatmodelenum').drop(op.get_bind())
    sa.Enum('admin:admin', 'appliances:write', 'appliances:read', 'electricity_monitoring:write', 'electricity_monitoring:read', 'hvac:read', 'hvac:write', 'locations:write', 'locations:read', 'location_operating_hours:write', 'location_operating_hours:read', 'mesh_networks:write', 'mesh_networks:read', 'organizations:write', 'organizations:read', 'organization_users:write', 'organization_users:read', 'temperature_monitoring:write', 'temperature_monitoring:read', 'users:write', 'users:read', name='accessscope').drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('admin:admin', 'appliances:write', 'appliances:read', 'electricity_monitoring:write', 'electricity_monitoring:read', 'hvac:read', 'hvac:write', 'locations:write', 'locations:read', 'location_operating_hours:write', 'location_operating_hours:read', 'mesh_networks:write', 'mesh_networks:read', 'organizations:write', 'organizations:read', 'organization_users:write', 'organization_users:read', 'temperature_monitoring:write', 'temperature_monitoring:read', 'users:write', 'users:read', name='accessscope').create(op.get_bind())
    sa.Enum('BC103S-ACDM-24', name='thermostatmodelenum').create(op.get_bind())
    sa.Enum('standard', 'modbus', name='nodetypeenum').create(op.get_bind())
    sa.Enum('alert-center', 'autoconfigure', 'manual-overrides', 'autochangeover', 'zone-temperatures', name='organizationfeaturetoggleenum').create(op.get_bind())
    sa.Enum('fridge', 'freezer', 'other', name='appliancesupertypeenum').create(op.get_bind())
    sa.Enum('appliance', 'zone', name='temperaturesensorplacetype').create(op.get_bind())
    sa.Enum('ALLOW_READ_LOCATION', 'ALLOW_UPDATE_LOCATION', name='locationaccessgrant').create(op.get_bind())
    sa.Enum('ALLOW_READ_ORGANIZATION', 'ALLOW_UPDATE_ORGANIZATION', 'ALLOW_CREATE_LOCATION', 'ALLOW_READ_LOCATION', 'ALLOW_UPDATE_LOCATION', name='organizationaccessgrant').create(op.get_bind())
    sa.Enum('Locked', 'Unlocked', 'NotLocked', name='thermostatlockouttype').create(op.get_bind())
    sa.Enum('input_duct', 'output_duct', 'room', name='controlzonetemperatureplacetype').create(op.get_bind())
    sa.Enum('Auto', 'AlwaysOn', name='thermostathvacfanmode').create(op.get_bind())
    sa.Enum('Auto', 'AlwaysOn', name='hvacfanmode').create(op.get_bind())
    sa.Enum('cooling', 'heating', 'auto', 'off', name='hvacschedulemode').create(op.get_bind())
    sa.Enum('Fridge', 'Freezer', 'Other', name='appliancetype').create(op.get_bind())
    sa.Enum('sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', name='dayofweek').create(op.get_bind())
    sa.Enum('above_normal_operating_range', 'below_normal_operating_range', name='temperaturesensorplacealerttype').create(op.get_bind())
    sa.Enum('GOOD', 'WARNING', 'DANGER', name='temperaturerangewarninglevelenum').create(op.get_bind())
    sa.Enum('RUUVI_TAG', 'S1', 'MST01_01', 'MST01_04', name='temperaturesensormodelenum').create(op.get_bind())
    sa.Enum('RUUVI', 'MINEW', name='temperaturesensormakeenum').create(op.get_bind())
    sa.Enum('mdp', 'sub', name='electricpaneltypeenum').create(op.get_bind())
    sa.Enum('A', 'B', 'C', 'N', name='clampphaseenum').create(op.get_bind())
    sa.Enum('main', 'neutral', 'branch', name='circuittypeenum').create(op.get_bind())
    op.alter_column('user_organization_access_grants', 'organization_access_grant',
               existing_type=sa.String(),
               type_=postgresql.ENUM('ALLOW_READ_ORGANIZATION', 'ALLOW_UPDATE_ORGANIZATION', 'ALLOW_CREATE_LOCATION', 'ALLOW_READ_LOCATION', 'ALLOW_UPDATE_LOCATION', name='organizationaccessgrant'),
               existing_nullable=False,
               postgresql_using='organization_access_grant::organizationaccessgrant')
    op.alter_column('user_location_access_grants', 'location_access_grant',
               existing_type=sa.String(),
               type_=postgresql.ENUM('ALLOW_READ_LOCATION', 'ALLOW_UPDATE_LOCATION', name='locationaccessgrant'),
               existing_nullable=False,
               postgresql_using='location_access_grant::locationaccessgrant')
    op.alter_column('user_access_scopes', 'access_scope',
               existing_type=sa.String(),
               type_=postgresql.ENUM('admin:admin', 'appliances:write', 'appliances:read', 'electricity_monitoring:write', 'electricity_monitoring:read', 'hvac:read', 'hvac:write', 'locations:write', 'locations:read', 'location_operating_hours:write', 'location_operating_hours:read', 'mesh_networks:write', 'mesh_networks:read', 'organizations:write', 'organizations:read', 'organization_users:write', 'organization_users:read', 'temperature_monitoring:write', 'temperature_monitoring:read', 'users:write', 'users:read', name='accessscope'),
               existing_nullable=False,
               postgresql_using='access_scope::accessscope')
    op.alter_column('thermostats', 'fan_mode',
               existing_type=sa.String(),
               type_=postgresql.ENUM('Auto', 'AlwaysOn', name='thermostathvacfanmode'),
               existing_nullable=False,
               postgresql_using='fan_mode::thermostathvacfanmode')
    op.alter_column('thermostats', 'keypad_lockout',
               existing_type=sa.String(),
               type_=postgresql.ENUM('Locked', 'Unlocked', 'NotLocked', name='thermostatlockouttype'),
               existing_nullable=False,
               postgresql_using='keypad_lockout::thermostatlockouttype')
    op.alter_column('thermostats', 'model',
               existing_type=sa.String(),
               type_=postgresql.ENUM('BC103S-ACDM-24', name='thermostatmodelenum'),
               existing_nullable=False,
               postgresql_using='model::thermostatmodelenum')
    op.alter_column('temperature_unit_widgets', 'appliance_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('Fridge', 'Freezer', 'Other', name='appliancetype'),
               existing_nullable=False,
               postgresql_using='appliance_type::appliancetype')
    op.alter_column('temperature_sensors', 'model',
               existing_type=sa.String(),
               type_=postgresql.ENUM('RUUVI_TAG', 'S1', 'MST01_01', 'MST01_04', name='temperaturesensormodelenum'),
               existing_nullable=True,
               postgresql_using='model::temperaturesensormodelenum')
    op.alter_column('temperature_sensors', 'make',
               existing_type=sa.String(),
               type_=postgresql.ENUM('RUUVI', 'MINEW', name='temperaturesensormakeenum'),
               existing_nullable=True,
               postgresql_using='make::temperaturesensormakeenum')
    op.alter_column('temperature_sensor_places', 'temperature_sensor_place_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('appliance', 'zone', name='temperaturesensorplacetype'),
               existing_nullable=False,
               postgresql_using='temperature_sensor_place_type::temperaturesensorplacetype')
    op.alter_column('temperature_sensor_place_alerts', 'alert_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('above_normal_operating_range', 'below_normal_operating_range', name='temperaturesensorplacealerttype'),
               existing_nullable=False,
               postgresql_using='alert_type::temperaturesensorplacealerttype')
    op.alter_column('temperature_ranges', 'warning_level',
               existing_type=sa.String(),
               type_=postgresql.ENUM('GOOD', 'WARNING', 'DANGER', name='temperaturerangewarninglevelenum'),
               existing_nullable=False,
               postgresql_using='warning_level::temperaturerangewarninglevelenum')
    op.alter_column('organization_feature_toggles', 'organization_feature_toggle',
               existing_type=sa.String(),
               type_=postgresql.ENUM('alert-center', 'autoconfigure', 'manual-overrides', 'autochangeover', 'zone-temperatures', name='organizationfeaturetoggleenum'),
               existing_nullable=False,
               postgresql_using='organization_feature_toggle::organizationfeaturetoggleenum')
    op.alter_column('nodes', 'type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('standard', 'modbus', name='nodetypeenum'),
               existing_nullable=False,
               postgresql_using='type::nodetypeenum')
    op.alter_column('location_time_of_use_rates', 'days_of_week',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(postgresql.ENUM('sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', name='dayofweek')),
               existing_nullable=False,
               postgresql_using='days_of_week::ARRAY<dayofweek>')
    op.alter_column('location_operating_hours', 'day_of_week',
               existing_type=sa.String(),
               type_=postgresql.ENUM('sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', name='dayofweek'),
               existing_nullable=False,
               postgresql_using='day_of_week::dayofweek')
    op.alter_column('hvac_schedule_events', 'mode',
               existing_type=sa.String(),
               type_=postgresql.ENUM('cooling', 'heating', 'auto', 'off', name='hvacschedulemode'),
               existing_nullable=False,
               postgresql_using='mode::hvacschedulemode')
    op.alter_column('hvac_holds', 'fan_mode',
               existing_type=sa.String(),
               type_=postgresql.ENUM('Auto', 'AlwaysOn', name='hvacfanmode'),
               existing_nullable=False,
               postgresql_using='fan_mode::hvacfanmode')
    op.alter_column('hvac_holds', 'mode',
               existing_type=sa.String(),
               type_=postgresql.ENUM('cooling', 'heating', 'auto', 'off', name='hvacschedulemode'),
               existing_nullable=False,
               postgresql_using='mode::hvacschedulemode')
    op.alter_column('electric_panels', 'panel_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('mdp', 'sub', name='electricpaneltypeenum'),
               existing_nullable=False,
               postgresql_using='panel_type::electricpaneltypeenum')
    op.alter_column('control_zone_temperature_place_links', 'control_zone_temperature_place_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('input_duct', 'output_duct', 'room', name='controlzonetemperatureplacetype'),
               existing_nullable=False,
               postgresql_using='control_zone_temperature_place_type::controlzonetemperatureplacetype')
    op.alter_column('clamps', 'phase',
               existing_type=sa.String(),
               type_=postgresql.ENUM('A', 'B', 'C', 'N', name='clampphaseenum'),
               existing_nullable=False,
               postgresql_using='phase::clampphaseenum')
    op.alter_column('circuits', 'type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('main', 'neutral', 'branch', name='circuittypeenum'),
               existing_nullable=False,
               postgresql_using='type::circuittypeenum')
    op.alter_column('appliances', 'appliance_super_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('fridge', 'freezer', 'other', name='appliancesupertypeenum'),
               existing_nullable=False,
               postgresql_using='appliance_super_type::appliancesupertypeenum')
    op.alter_column('access_role_access_scopes', 'access_scope',
               existing_type=sa.String(),
               type_=postgresql.ENUM('admin:admin', 'appliances:write', 'appliances:read', 'electricity_monitoring:write', 'electricity_monitoring:read', 'hvac:read', 'hvac:write', 'locations:write', 'locations:read', 'location_operating_hours:write', 'location_operating_hours:read', 'mesh_networks:write', 'mesh_networks:read', 'organizations:write', 'organizations:read', 'organization_users:write', 'organization_users:read', 'temperature_monitoring:write', 'temperature_monitoring:read', 'users:write', 'users:read', name='accessscope'),
               existing_nullable=False,
               postgresql_using='access_scope::accessscope')
    # ### end Alembic commands ###
