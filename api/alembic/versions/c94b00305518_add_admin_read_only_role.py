"""add admin read only role

Revision ID: c94b00305518
Revises: 83f5b2411003
Create Date: 2025-02-21 22:39:04.949844

"""
from alembic import op
import sqlalchemy as sa

from sqlalchemy.orm import Session

from app.v1.auth.models.access_role import AccessRole
from app.v1.auth.models.access_role_access_scope import AccessRoleAccessScope
from app.v1.schemas import AccessScope


# revision identifiers, used by Alembic.
revision = 'c94b00305518'
down_revision = '83f5b2411003'
branch_labels = None
depends_on = None


ACCESS_ROLE_NAME = 'admin:read'


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)

    try:
        # Create a new AccessRole
        access_role = AccessRole(name=ACCESS_ROLE_NAME)
        session.add(access_role)
        session.flush()  # Flush to get the generated ID
        session.refresh(access_role)

        # Add admin scope and all read scopes
        session.add(AccessRoleAccessScope(
            access_role_id=access_role.access_role_id, access_scope=AccessScope.ADMIN
        ))
        for scope in AccessScope:
            scope_parts = scope.value.split(':')
            if len(scope_parts) == 2 and scope_parts[1].lower() == 'read':
                session.add(AccessRoleAccessScope(
                    access_role_id=access_role.access_role_id, access_scope=scope
                ))

        # Commit the transaction
        session.commit()
    except Exception:
        session.rollback()
        raise
    finally:
        session.close()
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)

    try:
        # Remove the AccessRole and its associated AccessRoleAccessScope entries
        access_role = (
            session.query(AccessRole).filter(AccessRole.name == ACCESS_ROLE_NAME).first()
        )
        if access_role:
            session.query(AccessRoleAccessScope).filter(
                AccessRoleAccessScope.access_role_id == access_role.access_role_id
            ).delete()
            session.delete(access_role)

        # Commit the transaction
        session.commit()
    except Exception:
        session.rollback()
        raise
    finally:
        session.close()
    # ### end Alembic commands ###
