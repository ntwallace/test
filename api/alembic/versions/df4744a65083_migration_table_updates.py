"""Migration table updates

Revision ID: df4744a65083
Revises: 3119e4929e97
Create Date: 2024-08-06 20:49:19.792723

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'df4744a65083'
down_revision = '3119e4929e97'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('appliance', 'zone', name='temperaturesensorplacetype').create(op.get_bind())
    sa.Enum('fridge', 'freezer', 'other', name='appliancesupertypeenum').create(op.get_bind())
    op.add_column('appliances', sa.Column('name', sa.String(), nullable=False))
    op.add_column('appliances', sa.Column('appliance_super_type', postgresql.ENUM('fridge', 'freezer', 'other', name='appliancesupertypeenum', create_type=False), nullable=False))
    op.add_column('appliances', sa.Column('temperature_sensor_place_id', sa.Uuid(), nullable=True))
    op.alter_column('appliances', 'appliance_type_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('appliances', 'circuit_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_unique_constraint(None, 'appliances', ['name', 'location_id', 'circuit_id'])
    op.drop_column('appliances', 'temperature_sensor_id')
    op.add_column('temperature_sensor_places', sa.Column('temperature_sensor_place_type', postgresql.ENUM('appliance', 'zone', name='temperaturesensorplacetype', create_type=False), nullable=False))
    op.alter_column('temperature_sensors', 'make',
               existing_type=postgresql.ENUM('RUUVI', 'MINEW', name='temperaturesensormakeenum'),
               nullable=True)
    op.alter_column('temperature_sensors', 'model',
               existing_type=postgresql.ENUM('RUUVI_TAG', 'S1', 'MST01_01', 'MST01_04', name='temperaturesensormodelenum'),
               nullable=True)
    op.drop_column('temperature_sensors', 'type')
    op.add_column('temperature_unit_widgets', sa.Column('temperature_sensor_place_id', sa.Uuid(), nullable=False))
    op.drop_column('temperature_unit_widgets', 'temperature_place_id')
    sa.Enum('APPLIANCE', 'ZONE', name='temperaturesensortypeenum').drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('APPLIANCE', 'ZONE', name='temperaturesensortypeenum').create(op.get_bind())
    op.add_column('temperature_unit_widgets', sa.Column('temperature_place_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_column('temperature_unit_widgets', 'temperature_sensor_place_id')
    op.add_column('temperature_sensors', sa.Column('type', postgresql.ENUM('APPLIANCE', 'ZONE', name='temperaturesensortypeenum', create_type=False), autoincrement=False, nullable=False))
    op.alter_column('temperature_sensors', 'model',
               existing_type=postgresql.ENUM('RUUVI_TAG', 'S1', 'MST01_01', 'MST01_04', name='temperaturesensormodelenum'),
               nullable=False)
    op.alter_column('temperature_sensors', 'make',
               existing_type=postgresql.ENUM('RUUVI', 'MINEW', name='temperaturesensormakeenum'),
               nullable=False)
    op.drop_column('temperature_sensor_places', 'temperature_sensor_place_type')
    op.add_column('appliances', sa.Column('temperature_sensor_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'appliances', type_='unique')
    op.alter_column('appliances', 'circuit_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('appliances', 'appliance_type_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_column('appliances', 'temperature_sensor_place_id')
    op.drop_column('appliances', 'appliance_super_type')
    op.drop_column('appliances', 'name')
    sa.Enum('fridge', 'freezer', 'other', name='appliancesupertypeenum').drop(op.get_bind())
    sa.Enum('appliance', 'zone', name='temperaturesensorplacetype').drop(op.get_bind())
    # ### end Alembic commands ###
